# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: CI/CD â€” test / build / deploy

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  test:

    runs-on: ubuntu-latest

    steps:
      - name: checkout repository
        uses: actions/checkout@v4

      - name: set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"

      - name: install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: lint with flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: run tests
        run: |
          pytest -q backend/tests

  build:

    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: checkout repository
        uses: actions/checkout@v4

      - name: ensure docker is available
        run: docker version

      - name: build docker-compose images 
        run: |
          docker compose build --pull

  deploy:

    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: checkout repository
        uses: actions/checkout@v4

      - name: start services (detached)
        run: |
          docker compose up -d

      - name: wait for app to be ready
        run: |
          for i in {1..20}; do
            if curl --fail --silent http://localhost:8000/; then
              echo "app is up!"
              exit 0
            fi
            echo "waiting for app... ($i/20)"
            sleep 2
          done
          echo "[!] app did not start in time"
          docker compose logs
          docker compose down
          exit 1

      - name: smoke test root endpoint
        run: |
          curl -f http://localhost:8000/ || (echo "[!] smoke test failed" && exit 1)

      - name: stop services
        if: always()
        run: |
          docker compose down

